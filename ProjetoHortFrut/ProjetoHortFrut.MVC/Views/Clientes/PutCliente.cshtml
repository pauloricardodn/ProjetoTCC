@model ProjetoHortFrut.MVC.ViewModels.ClienteViewModel
@if (ViewBag.erros != null)
{
    <div class="row">
        <div class="col s12">
            <h6>@ViewBag.erros</h6>
        </div>
    </div>
}
<div id="divTblClientesEditaveis">
    <div class="">
        <table id="tlbClientesEditaveis" class="striped responsive-table centered">
            <thead>
                <tr>
                    <th>Nome</th>
                    <th>CPF</th>
                    <th>RG</th>
                    <th>Fone</th>
                    <th>Bairro</th>
                    <th>Rua</th>
                    <th>Num</th>
                    <th>Alterar</th>
                </tr>
            </thead>
            <tbody id="tbdClientesConta">
                @if (!Model.Clientes.Any() || Model.Clientes.Count() != 0)
                {
                    foreach (var cli in Model.Clientes)
                    {
                        <tr id=@cli.Id>
                            <td>@cli.nome</td>
                            <td>@cli.cpf</td>
                            <td>@cli.rg</td>
                            <td>@cli.fone</td>
                            <td>@cli.bairro</td>
                            <td>@cli.rua</td>
                            <td>@cli.num</td>
                            <td>
                                <button type="button" class="btnClienteEditavel modal-action modal-close btn green btn-small">
                                    <i class="material-icons">edit_box</i>
                                </button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td>Nenhum Registro encontrado.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div id="formClienteEditavel">
    <div class="row divErroNaOperacao">
        <div class="col s12">
            <h6 class="erroOperacao"></h6>
        </div>
    </div>

    <div class="row divSucessoNaOperacao">
        <div class="col s12">
            <h6 class="sucessoOperacao"></h6>
        </div>
    </div>
    <h5>Editar Cliente</h5>
    <div class="row">
        <div class="col s12">
            <hr>
        </div>
        <div class="col s12">
            @using (Ajax.BeginForm("PutCliente", "Clientes", null, new AjaxOptions
            {
                HttpMethod = "PUT",
                OnSuccess = "sucesso",
                OnFailure = "erro(xhr)",
                OnBegin = "progresso",
                OnComplete = "fim"
            }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                {
                    <input type="hidden" name="Id" id="id" />
                    <div class="row">
                        <div class="col s6">
                            <label for="nome" class="col s12">Nome</label>
                            @Html.EditorFor(model => model.nome, new { htmlAttributes = new { @class = "col s12" } })
                            @Html.ValidationMessageFor(model => model.nome, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row">
                        <div class="col s3">
                            <label for="cpf" class="col s12">CPF</label>
                            @Html.EditorFor(model => model.cpf, new { htmlAttributes = new { @class = "col s12 cpf" } })
                            @Html.ValidationMessageFor(model => model.cpf, "", new { @class = "text-danger" })
                        </div>
                        <div class="col s3 ">
                            <label for="rg" class="col s12">RG</label>
                            @Html.EditorFor(model => model.rg, new { htmlAttributes = new { @class = "col s12 rg" } })
                        </div>
                        <div class="col s6">
                            <label class="col s12">Nivel de Usuário</label>
                            <p>
                                <input class="with-gap col s1" value="c" name="nivel" type="radio" id="cliente" checked />
                                <label for="cliente" class="col s4">Cliente</label>
                            </p>
                            <p>
                                <input class="with-gap col s1" name="nivel" value="f" type="radio" id="funcionario" />
                                <label for="funcionario" class="col s4">Funcionario</label>
                            </p>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col s6 padding-left">
                            <label class="col s12" for="ddlestadoClientes">Estado</label>
                            <select id="ddlestadoClientes" name="EstadoId" class="col s12" disabled>
                                <option value="0">Selecione</option>
                            </select>
                        </div>
                        <div class="col s6">
                            <label class="col s12" for="ddlCidadesClientes">Cidade</label>
                            <select id="ddlCidadesCliente" name="cidadeId" class="col s12" disabled>
                                <option value="0">Selecione</option>
                            </select>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col s4">
                            <label for="bairro" class="col s12">Bairro</label>
                            @Html.EditorFor(model => model.bairro, new { htmlAttributes = new { @class = "col s12" } })
                            @Html.ValidationMessageFor(model => model.bairro, "", new { @class = "text-danger" })
                        </div>
                        <div class="col s5 ">
                            <label for="rua" class="col s12">Rua</label>
                            @Html.EditorFor(model => model.rua, new { htmlAttributes = new { @class = "col s12" } })
                            @Html.ValidationMessageFor(model => model.rua, "", new { @class = "text-danger" })
                        </div>
                        <div class="col s3 ">
                            <label for="num" class="col s12">N°</label>
                            @Html.EditorFor(model => model.num, new { htmlAttributes = new { @class = "col s12" } })
                            @Html.ValidationMessageFor(model => model.num, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col s2 ">
                            <label for="fone" class="col s12">Fone</label>
                            @Html.EditorFor(model => model.fone, new { htmlAttributes = new { @class = "col s12 fone" } })
                            @Html.ValidationMessageFor(model => model.fone, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col s3">
                            <input type="checkbox" id="ativo" name="ativo" checked />
                            <label for="ativo">Ativo</label>
                        </div>
                    </div>
                    <div class="row">
                        <button class="btn waves-effect waves-light right" type="submit" name="EditaCliente">
                            Editar
                            <i class="material-icons right">send</i>
                        </button>
                    </div>
                }
            }
        </div>
    </div>
</div>
<script>
    function sucesso() {
        $(".divErroNaOperacao").hide();
        $("#nome").val("");
        $("#rua").val("");
        $("#bairro").val("");
        $("#cpf").val("");
        $("#fone").val("");
        $("#num").val("");
        $("#rg").val("");
        $(".divSucessoNaOperacao").fadeIn(3000);
        $(".sucessoOperacao").html("<i class='tiny material-icons'>check_circle</i> Cliente alterado com Sucesso!")
    }
    function erro(xhr) {
        $(".divSucessoNaOperacao").hide();
        $(".divErroNaOperacao").fadeIn(3000);
        $(".erroOperacao").html("<i class='tiny material-icons'>error</i>Ops! algo deu errado. " + xhr.responseText);
    }
    $(document).ready(function () {
        $(".container").addClass("aumento");
        $body = $("body");
        $("#formClienteEditavel").hide();
        $("#tlbClientesEditaveis").dataTable({
            language: {
                "sEmptyTable": "Nenhum registro encontrado",
                "sInfo": "Mostrando de _START_ até _END_ de _TOTAL_ registros",
                "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
                "sInfoFiltered": "(Filtrados de _MAX_ registros)",
                "sInfoPostFix": "",
                "sInfoThousands": ".",
                "sLengthMenu": "Exibir _MENU_",
                "sLoadingRecords": "Carregando...",
                "sProcessing": "Processando...",
                "sZeroRecords": "Nenhum registro encontrado",
                "sSearch": "Pesquisar",
                "oPaginate": {
                    "sNext": "Próximo",
                    "sPrevious": "Anterior",
                    "sFirst": "Primeiro",
                    "sLast": "Último"
                },
                "oAria": {
                    "sSortAscending": ": Ordenar colunas de forma ascendente",
                    "sSortDescending": ": Ordenar colunas de forma descendente"
                }
            }

        });
        //pega o id do cliente selecionado
        $(".btnClienteEditavel").click(function () {
            $(".loading").show();
            var id = $(this).closest('tr').attr('id');
            $("#divTblClientesEditaveis").hide();
            $.ajax(
                {
                    type: 'GET',
                    url: "/Clientes/GetByClienteId/" + id,
                    dataType: 'json',
                    cache: false,
                    async: true,
                    success: function (data) {
                        debugger;

                        $(".container").removeClass("aumento");
                        $("#id").val(data.Id);
                        $("#nome").val(data.nome);
                        $("#cpf").val(data.cpf).mask("999.999.999-99");
                        $("#rg").val(data.rg);
                        $("#fone").val(data.fone);
                        $("#bairro").val(data.bairro);
                        $("#rua").val(data.rua);
                        $("#num").val(data.num);
                        if (data.nivel == 'f') {
                            $("#funcionario").prop('checked', true);
                        } else {
                            $("#cliente").prop('checked', true);
                        }
                        if (data.ativo == 1) {
                            $("#ativo").prop('checked', true);
                            $("#ativo").val(true);
                        } else {
                            $("#ativo").prop('checked', false);
                            $("#ativo").val(false);
                        }
                        debugger;
                        //função que retornara a cidade do cliente
                        $.ajax({
                            type: "GET",
                            url: "/EstadosCidades/GetCidadeJaCadastrada",
                            datatype: "Json",
                            data: {
                                cidadeId: data.cidadeId,
                                estadoId: data.estadoId
                            },
                            success: function (dados) {
                                $('#ddlCidadesCliente').html('');
                                $('#ddlCidadesCliente').removeAttr('disabled');

                                $.each(dados,
                                    function (value, option) {

                                        $('#ddlCidadesCliente')
                                            .append($('<option></option>').val(option.Value).html(option.Text));
                                    });
                                $('#ddlCidadesCliente').material_select();
                            },
                            error: function (xhr) {
                                debugger;
                                alert("Ops! algo deu errado! Erro " + xhr.reponseText);
                            }
                        });
                        $.ajax({
                            type: "GET",
                            url: "/EstadosCidades/GetEstadoJaCadastrado",
                            datatype: "Json",
                            data: {
                                estadoId: data.estadoId
                            },
                            success: function (dados) {
                                $('#ddlestadoClientes').html('');
                                $('#ddlestadoClientes').removeAttr('disabled');

                                $.each(dados,
                                    function (value, option) {

                                        $('#ddlestadoClientes')
                                            .append($('<option></option>').val(option.Value).html(option.Text));
                                    });
                                $('#ddlestadoClientes').material_select();
                                $("#formClienteEditavel").show();
                                $body.removeClass("loading");
                            },
                            error: function ajaxError(dados) {
                                alert(dados.status + ' ' + dados.statusText);
                            }
                        });
                        $(".loading").hide();
                    },
                    error(e) {
                        alert("Erro ao Consultar Clientes!");
                    }

                });
        });
        $("#ativo").change(function () {
            if ($("#ativo").is(':checked')) {
                $("#ativo").val(true);
            } else {
                $("#ativo").val(false);
            }
        });
        //função que busca cidades pelo id do estado e seta no combo cidades
        $(document).on("change",
            "#ddlestadoClientes",
            function () {
                debugger;
                var id = $("#ddlestadoClientes").val();
                $('#ddlCidadesCliente').empty();
                $.ajax(
                    {
                        type: 'GET',
                        url: "/EstadosCidades/GetCidadesByIdEstado/" + id,
                        dataType: 'json',
                        cache: false,
                        async: true,
                        success: function (data) {
                            $.each(data,
                                function (key, value) {
                                    $("#ddlCidadesCliente")
                                        .append("<option value=" + value.cidadeId + ">" + value.Nome + "</option>");
                                });
                            $('#ddlCidadesCliente').material_select();
                        },
                        error(e) {
                            alert("Erro ao Consultar Cidades!");
                        }

                    });
            });

    });
</script>
